name: matrix jq and release

on:
  - workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [jq]
        os_id: [alpine]
        os_version_id: [edge]
        arch_type:
          [
            aarch64-linux-musl,
            aarch64_be-linux-musl,
            arm-linux-musleabi,
            arm-linux-musleabihf,
            armeb-linux-musleabi,
            armeb-linux-musleabihf,
            armel-linux-musleabi,
            armel-linux-musleabihf,
            armv5l-linux-musleabi,
            armv5l-linux-musleabihf,
            armv6-linux-musleabi,
            armv6-linux-musleabihf,
            armv7l-linux-musleabihf,
            armv7m-linux-musleabi,
            armv7r-linux-musleabihf,
            i486-linux-musl,
            i686-linux-musl,
            m68k-linux-musl,
            microblaze-linux-musl,
            microblazeel-linux-musl,
            mips-linux-musl,
            mips-linux-muslsf,
            mips-linux-musln32sf,
            mips64-linux-musl,
            mips64-linux-musln32,
            mips64-linux-musln32sf,
            mips64el-linux-musl,
            mips64el-linux-musln32,
            mips64el-linux-musln32sf,
            mipsel-linux-musl,
            mipsel-linux-musln32,
            mipsel-linux-musln32sf,
            mipsel-linux-muslsf,
            or1k-linux-musl,
            powerpc-linux-musl,
            powerpc-linux-muslsf,
            powerpc64-linux-musl,
            powerpc64le-linux-musl,
            powerpcle-linux-musl,
            powerpcle-linux-muslsf,
            riscv32-linux-musl,
            riscv64-linux-musl,
            s390x-linux-musl,
            sh2-linux-musl,
            sh2-linux-muslfdpic,
            sh2eb-linux-musl,
            sh2eb-linux-muslfdpic,
            sh4-linux-musl,
            sh4eb-linux-musl,
            x86_64-linux-musl,
            x86_64-linux-muslx32,
          ]

    name: ${{ matrix.name }} ${{ matrix.arch_type }}

    env:
      prerelease: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0

      - name: Host - update
        run: sudo apt-get update

      - name: Host - upgrade
        run: sudo apt-get -y upgrade

      - name: Host - Install host qemu-static
        run: sudo apt-get install -y qemu binfmt-support qemu-user-static curl

      - name: Host - Docker multiarch bootstrap
        run: sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Host - Create Docker template env file
        run: |
          echo "PATH=/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" > env.custom
          echo "LD_LIBRARY_PATH=/root/lib:/root/${{ matrix.arch_type }}/lib" >> env.custom

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Docker - apk install build deps
        run: docker exec --env-file env.custom -w /root multiarch apk add autoconf automake bash bash-completion bison build-base coreutils cmake ccache curl findutils flex git graphviz libarchive-tools libtool linux-headers ncurses-dev patch perl pkgconf python3 python3-dev re2c rsync rsync texinfo ttf-freefont xz zip

      - name: Docker target - install musl-cross-make ${{ matrix.arch_type }}
        run: |
          docker exec --env-file env.custom multiarch curl -sL "https://github.com/userdocs/musl-cross-make/releases/latest/download/${{ matrix.arch_type }}.tar.gz" > "${{ matrix.arch_type }}.tar.gz"
          docker exec --env-file env.custom multiarch tar xf "${{ matrix.arch_type }}.tar.gz" --strip-components=1 -C /usr/local

      - name: Docker - Git clone ${{ matrix.name }}
        run: docker exec --env-file env.custom -w /root multiarch git clone --single-branch --branch "master" --shallow-submodules --recurse-submodules --depth 1 https://github.com/stedolan/jq.git ${{ matrix.name }}

      - name: Docker - autoreconf ${{ matrix.name }}
        run: docker exec --env-file env.custom -w  /root/${{ matrix.name }} multiarch autoreconf -fi

      - name: Docker - Configure ${{ matrix.name }}
        run: docker exec --env-file env.custom -w  /root/${{ matrix.name }} multiarch ./configure --prefix=/root/${{ matrix.name }}-completed --with-oniguruma=builtin --host=${{ matrix.arch_type }}

      - name: Docker - build ${{ matrix.name }} with the ${{ matrix.arch_type }} toolchain
        run: docker exec --env-file env.custom -w /root/${{ matrix.name }} multiarch make LDFLAGS=-all-static -j"$(nproc)" ARCH=${{ matrix.arch_type }} CC=${{ matrix.arch_type }}-gcc AR=${{ matrix.arch_type }}-ar CXX=${{ matrix.arch_type }}-g++

      - name: Docker - install ${{ matrix.arch_type }}
        run: docker exec --env-file env.custom -w  /root/${{ matrix.name }} multiarch make install

      - name: Docker - archive ${{ matrix.name }}
        run: docker exec --env-file env.custom -w /root multiarch tar -czvf ${{ matrix.arch_type }}.tar.gz ${{ matrix.name }}-completed

      - name: Host - Set ${{ matrix.name }} version
        run: docker exec --env-file env.custom -w  /root/${{ matrix.name }} multiarch bash -c './scripts/version > /root/jq-version'

      - name: Host - Get ${{ matrix.name }} version
        run: echo "version=$(cat jq-version | sed 's/-dirty//')" >> $GITHUB_ENV

      - name: Create release - tag - assets
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: "${{ matrix.arch_type }}.tar.gz"
          replacesArtifacts: true
          tag: "${{ env.version }}"
          name: "${{ matrix.name }} ${{ env.version }} "
          body: "${{ matrix.name }} ${{ env.version }} built using https://github.com/userdocs/musl-cross-make"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: userdocs/jq

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: userdocs/jq:${{ matrix.arch_type }}
          build-args: |
            TARGET=${{ matrix.arch_type }}
            BASE_URL=https://github.com/userdocs/jq-crossbuild/releases/latest/download
